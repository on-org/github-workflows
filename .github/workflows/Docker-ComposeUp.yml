name: Run application via Docker Compose

on:
  workflow_call:
    inputs:
      enabled:
        type: boolean
        required: false
        default: true
      registry:
        type: string
        required: false
        default: 'ghcr.io'
      latest:
        type: string
        required: false
        default: 'false'
      prefix:
        type: string
        required: false
        default: ''
      suffix:
        type: string
        required: false
        default: ''
      compose_service:
        description: 'Docker compose service name for scaling'
        type: string
        required: true
        default: 'app'
      compose_path:
        description: 'Path ot Docker compose file'
        type: string
        required: false
        default: 'docker-compose.yml'
      compose_env_file_path:
        description: 'Path ot env_file file'
        type: string
        required: false
        default: ''
      docker_host:
        description: 'Docker host to run on'
        type: string
        required: true
      project:
        description: 'Compose project name'
        type: string
        required: true
      compose_timeout:
        description: 'Timeout in seconds for container shutdown when containers are already running'
        type: number
        required: false
        default: 10
      custom_options:
        description: 'Custom docker compose up options'
        type: string
        required: false
        default: ''
    secrets:
      env_vars:
        required: false

jobs:
  compose-up:
    if: ${{ inputs.enabled }}
    runs-on: ci-server
    env:
#      ENV_FILE_CONTENT_BASE64: ${{ secrets.ENV_FILE_CONTENT_BASE64 }}
      DOCKER_HOST: ${{ inputs.docker_host }}
      APP_ENV_FILE: ${{ inputs.compose_env_file_path }}
    steps:
      - name: cleanup
        run: sudo rm -fr $GITHUB_WORKSPACE && mkdir $GITHUB_WORKSPACE

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Get Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ inputs.registry }}/${{ github.repository }}
          flavor: |
            latest=${{ inputs.latest }}
            prefix=${{ inputs.prefix }}
            suffix=${{ inputs.suffix }}

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

#      - name: Generate .env file from secrets
#        if: ${{ env.ENV_FILE_CONTENT_BASE64 != '' }}
#        run: >
#          echo $ENV_FILE_CONTENT_BASE64 | base64 -d > ${{ inputs.compose_env_file_path }}

# Переменна должна быть проверена на то, пустая ли она. В случае если пустая - файл не надо перезаписывать пустым содержимым тк иначе сломаются деплои, которые используют файлы переменных.
# Посколькую многострочные перменные через if не проверить, то создаётся файл из переменной и проверяется через -s. Потом файл удаляется
      - name: Generate .env file
        run: |
          echo "${{ secrets.env_vars }}" > tmp.vars
          if [ -s tmp.vars ]; then
            echo "Setting variable"
            echo "${{ secrets.env_vars }}" > ${{ inputs.compose_env_file_path }}
          else
            echo "Variable is empty. No deed to re-write the file"
          fi
          rm tmp.vars

      - name: Lint and show compose manifest
        env:
          IMAGE_NAME: ${{ steps.meta.outputs.tags }}
        run: >
          /usr/bin/docker compose
          -p ${{ inputs.project }}
          -f ${{ inputs.compose_path }}
          --env-file ${{ inputs.compose_env_file_path }} ${{ inputs.custom_options }}
          convert ${{ inputs.compose_service }}

      - name: Pre-pull new Docker-image
        env:
          IMAGE_NAME: ${{ steps.meta.outputs.tags }}
        run: >
          /usr/bin/docker compose
          -p ${{ inputs.project }}
          -f ${{ inputs.compose_path }}
          --env-file ${{ inputs.compose_env_file_path }} ${{ inputs.custom_options }}
          pull --quiet ${{ inputs.compose_service }}

      - name: Update and start App
        env:
          IMAGE_NAME: ${{ steps.meta.outputs.tags }}
        run: >
          /usr/bin/docker compose
          -p ${{ inputs.project }}
          -f ${{ inputs.compose_path }}
          --env-file ${{ inputs.compose_env_file_path }}
          up --detach --timeout ${{ inputs.compose_timeout }} ${{ inputs.custom_options }} ${{ inputs.compose_service }}
